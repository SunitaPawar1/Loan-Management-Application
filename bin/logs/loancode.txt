<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.7</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.loanmanagement</groupId>
	<artifactId>loan-system</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Loan Management System</name>
	<description>Spring Boot application for managing loans, users, documents, and repayments.</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.30</version> <!-- You can use the latest version -->
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>


	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


spring.application.name=loan-management-system
# DATABASE CONFIGURATION  ===============================
spring.datasource.url=jdbc:h2:mem:loanappdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.sql.init.mode=always

# JPA / HIBERNATE CONFIG  =============
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# SERVER CONFIGURATION     =====================
server.port=8080

# ACTUATOR / MONITORING  ===============================
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true

# LOGGING CONFIGURATION    ==================
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework=INFO
logging.level.com.loanmanagement=DEBUG
logging.file.name=logs/loanapp.log
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# IN-MEMORY SECURITY USER  =============
#spring.security.user.name=admin
#spring.security.user.password=admin123
#spring.security.user.roles=ADMIN



------ admin-dashboard ---------------
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Admin Dashboard</title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" th:href="@{/css/style.css}" />
</head>
<body>
<h1>Welcome Admin</h1>

<p th:text="'Hello, ' + ${user.username} + '! You have admin privileges.'"></p>

<ul>
    <li><a th:href="@{/users}">Manage Users</a></li>
    <li><a th:href="@{/loans}">View All Loans</a></li>
    <li><a th:href="@{/reports}">Reports</a></li>
</ul>

<form th:action="@{/logout}" method="post">
    <button type="submit">Logout</button>
</form>
</body>
</html>
-------customer-dahboard ------------
<h2>Welcome [[${user.fullName}]]!</h2>
<a href="/api/loans/types">View Loan Types (API)</a>

--- error ---------
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Error Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #fafafa;
            text-align: center;
            padding: 60px;
        }
        .error-box {
            display: inline-block;
            padding: 30px;
            border: 1px solid #ccc;
            background-color: #fff;
            box-shadow: 2px 2px 12px #aaa;
        }
        .error-code {
            font-size: 72px;
            color: #e74c3c;
        }
        .error-message {
            font-size: 18px;
            color: #333;
        }
        a {
            display: inline-block;
            margin-top: 20px;
            text-decoration: none;
            color: #3498db;
        }
    </style>
</head>
<body>
<div class="error-box">
    <div class="error-code">Error</div>
    <div class="error-message" th:text="${error}">Something went wrong!</div>
    <a href="/">Go back to Home</a>
</div>
</body>
</html>
--- <!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Loan Management System</title>
</head>
<body>
<h1>Welcome to Loan Management System</h1>
<a href="/register">Register</a> | <a href="/login">Login</a>
</body>
</html>
----index--------
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Loan Management System</title>
</head>
<body>
<h1>Welcome to Loan Management System</h1>
<a href="/register">Register</a> | <a href="/login">Login</a>
</body>
</html>
-----dashboard.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Login</title>
</head>
<body>
<h2>Login</h2>
<form method="post" action="/login">
    <input type="text" name="username" placeholder="Username"/><br/>
    <input type="password" name="password" placeholder="Password"/><br/>
    <button type="submit">Login</button>
</form>
</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Register</title>
</head>
<body>
<h2>Register</h2>
<form th:action="@{/register}" method="post" th:object="${user}">
    <input type="text" th:field="*{username}" placeholder="Username" required/><br/>
    <input type="password" th:field="*{password}" placeholder="Password" required/><br/>
    <input type="text" th:field="*{fullName}" placeholder="Full Name"/><br/>
    <input type="email" th:field="*{email}" placeholder="Email"/><br/>
    <input type="text" th:field="*{phone}" placeholder="Phone"/><br/>

    <label for="role">Select Role:</label>
    <select name="selectedRole" id="role">
        <option value="CUSTOMER">Customer</option>
        <option value="ADMIN">Admin</option>
    </select><br/>

    <button type="submit">Register</button>
</form>

</body>
</html>
package com.loanmanagement.loansystem.Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/", "/login", "/register", "/h2-console/**", "/actuator/**").permitAll()
                        .anyRequest().authenticated()
                )
                /*.formLogin(form -> form
                        .loginPage("/login")
                        .permitAll()
                )*/
                .logout(logout -> logout
                        .logoutSuccessUrl("/login?logout")
                        .permitAll()
                )
                .csrf(csrf -> csrf
                        .ignoringRequestMatchers("/h2-console/**", "/actuator/**")
                )
                .headers(headers -> headers
                        .frameOptions(frame -> frame.disable()) // âœ… modern way
                );

        return http.build();
    }
}
package com.loanmanagement.loansystem.Controller;

import com.loanmanagement.loansystem.Entity.Role;
import com.loanmanagement.loansystem.Entity.User;
import com.loanmanagement.loansystem.Repository.RoleRepository;
import com.loanmanagement.loansystem.Repository.UserRepository;
import com.loanmanagement.loansystem.Service.UserService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
public class WebController {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private UserService userService;
    @Autowired
    private RoleRepository roleRepository;

    // Home Page
    @GetMapping("/")
    public String home() {
        return "index"; // returns index.html
    }

    // Registration form
    @GetMapping("/register")
    public String showRegisterForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }

    // Save user
    @PostMapping("/register")
    public String registerUser(@ModelAttribute("user") User user,
                               @RequestParam("selectedRole") String selectedRole) {

        user.setStatus("ACTIVE");
        user.setCreatedAt(LocalDateTime.now());

        // Get selected role
        Role role = roleRepository.findByRoleName(selectedRole.toUpperCase())
                .orElseThrow(() -> new RuntimeException("Role not found: " + selectedRole));

        user.setRoles(Set.of(role));
        userService.registerUser(user,selectedRole);
        return "redirect:/login";
    }


    // Login form (no authentication yet)
    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }

    @PostMapping("/login")
    public String loginUser(@RequestParam("username") String username,
                            @RequestParam("password") String password,
                            Model model) {
        Optional<User> optionalUser = userRepository.findByUsername(username);

        if (optionalUser.isPresent()) {
            User user = optionalUser.get();

            if (user.getPassword().equals(password)) {
                // Role-based redirection
                String role = user.getRoles().stream()
                        .findFirst()
                        .map(r -> r.getRoleName().toUpperCase())
                        .orElse("CUSTOMER");

                model.addAttribute("user", user);

                if (role.equals("ADMIN")) {
                    return "admin-dashboard";
                } else {
                    return "customer-dashboard";
                }
            }
        }

        model.addAttribute("error", "Invalid username or password");
        return "login";
    }


}
package com.loanmanagement.loansystem.Entity;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "roles")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Role {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name="role_name")
    private String roleName; // E.g., ADMIN, CUSTOMER

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }
}
package com.loanmanagement.loansystem.Entity;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {
        //implements UserDetails {
    //Used for Spring Security

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    private String password;
    private String fullName;
    private String email;
    private String phone;
    private String status;
    private LocalDateTime createdAt;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "user_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public Set<Role> getRoles() {
        return roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }


    /* @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return roles.stream()
                .map(role -> (GrantedAuthority) role::getRoleName)
                .collect(Collectors.toList());
    }

    @Override public boolean isAccountNonExpired() { return true; }
    @Override public boolean isAccountNonLocked() { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled() { return "ACTIVE".equalsIgnoreCase(this.status); }*/


}
package com.loanmanagement.loansystem.Exception;

import org.springframework.http.HttpStatus;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
    //handle user not found for WebController
    @ExceptionHandler(UserNotFoundException.class)
    public String handleUserNotFound(UserNotFoundException ex, Model model) {
        model.addAttribute("error", ex.getMessage());
        return "error"; // error.html
    }
    //handle generic exception (both web & rest fallback)
    @ExceptionHandler(Exception.class)
    public String handleGeneric(Exception ex, Model model) {
        model.addAttribute("error", "Unexpected error: " + ex.getMessage());
        return "error";
    }
}
package com.loanmanagement.loansystem.Exception;

public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}

package com.loanmanagement.loansystem.Repository;

import com.loanmanagement.loansystem.Entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface RoleRepository extends JpaRepository<Role, Long> {
    Optional<Role> findByRoleName(String roleName);
}
package com.loanmanagement.loansystem.Repository;

import com.loanmanagement.loansystem.Entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    
}
package com.loanmanagement.loansystem.Service;

import com.loanmanagement.loansystem.Entity.User;
import com.loanmanagement.loansystem.Repository.UserRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;
    @Transactional
    public void registerUser(User user, String selectedRole) {
        userRepository.save(user);
    }
}package com.loanmanagement.loansystem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LoanManagementSystemApplication {

	public static void main(String[] args) {
		SpringApplication.run(LoanManagementSystemApplication.class, args);
	}

}
